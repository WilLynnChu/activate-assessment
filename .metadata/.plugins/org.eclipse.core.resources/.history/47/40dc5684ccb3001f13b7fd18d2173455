package keywords;

import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.support.ui.ExpectedConditions;

import static org.testng.Assert.assertEquals;

import java.io.*;
import java.nio.file.*;
import java.util.*;

import io.github.bonigarcia.wdm.WebDriverManager;
import io.restassured.module.jsv.JsonSchemaValidator;
import static org.hamcrest.MatcherAssert.assertThat;

import java.time.Duration;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatterBuilder;

public class GenericKeywords {

    public static Path project_path = Paths.get("").toAbsolutePath();
    public static Path test_data_path = project_path.resolve("src/test/java/test-data");
    public static Path test_output_path = project_path.resolve("test-output");
    
    public static void clearTestOutput(Path directoryPath) {
        if (Files.exists(directoryPath) && Files.isDirectory(directoryPath)) {
            try (DirectoryStream<Path> stream = Files.newDirectoryStream(directoryPath)) {
                for (Path entry : stream) {
                    if (Files.isDirectory(entry)) {
                    	clearTestOutput(entry);
                    }
                    Files.delete(entry);
                }
                System.out.println("Directory cleared successfully.");
            } catch (IOException e) {
                System.err.println("Error clearing directory: " + e.getMessage());
            }
        } else {
            System.out.println("Directory does not exist or is not a directory.");
        }
    }
    
    public static WebDriver startWebDriver() {
    	WebDriverManager.chromedriver().setup();
    	Map<String, Object> prefs = new Hashtable<String, Object>();
        prefs.put("download.default_directory", test_output_path.toString());
        ChromeOptions chromeOptions = new ChromeOptions();
        chromeOptions.setExperimentalOption("prefs", prefs);
        WebDriver driver = new ChromeDriver(chromeOptions);
		return driver;
    }
    
    public static void quitWebDriver(WebDriver driver) {
        driver.close();
    }

    public static Map<String, Object> replaceNullInMap(Map<String, Object> jsonMap) {
        for (Map.Entry<String, Object> entry : jsonMap.entrySet()) {
            if (entry.getValue() == null) {
                entry.setValue("");
            }
        }
        return jsonMap;
    }

    public static void assertDecimals(String actualDecimal, String expectedDecimal) {
        if (expectedDecimal.isEmpty()) {
            assertEquals(actualDecimal, expectedDecimal);
        } else {
            double actualValue = Double.parseDouble(actualDecimal);
            double expectedValue = Double.parseDouble(expectedDecimal);
            assertEquals(actualValue, expectedValue);
        }
    }

    // Method to validate JSON schema
    public static void validateJsonSchema(String schemaFileName, String responseBody) {
        String schemaContent;
		try {
			schemaContent = new String(Files.readAllBytes(Paths.get(test_data_path + schemaFileName)));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			throw new AssertionError(e.getMessage());
		}
        assertThat(responseBody, JsonSchemaValidator.matchesJsonSchema(schemaContent));
    }

    public static WebElement pageShouldContainElement(WebDriver driver, By locator) {

		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		WebElement element = wait.until(ExpectedConditions.visibilityOfElementLocated(locator));
		
        if (!element.isDisplayed()) {
            throw new AssertionError("Element not found: " + locator);
        }
        return element;
    }
    
    public static Map<String, String> createSQLDictionary(){
    	Map<String, String> dict = new HashMap<>();
		return dict;
    }
    
    public static Map<String, String> addToSQLDictionary(Map<String, String> dict, String key, String value){
        dict.put(key, value);
		return dict;
    }
}
